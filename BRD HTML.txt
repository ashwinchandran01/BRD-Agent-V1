<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GoComet BRD AI Agent</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-50: #f0f6ff;
            --primary-100: #e6f2ff;
            --primary-400: #3376ff;
            --primary-500: #0054ff;
            --primary-800: #003e9c;
            --secondary-500: #112f6b;
            --gray-50: #f8fafc;
            --gray-100: #f1f5f9;
            --gray-200: #e2e8f0;
            --gray-300: #cbd5e0;
            --gray-400: #94a3b8;
            --gray-500: #64748b;
            --gray-600: #475569;
            --gray-700: #334155;
            --gray-800: #1e293b;
            --gray-900: #0f172a;
            --success-500: #10b981;
            --success-600: #059669;
            --error-500: #ef4444;
            --warning-500: #f59e0b;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, var(--primary-50) 0%, var(--gray-50) 100%);
            color: var(--gray-800);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem 0;
        }

        .header h1 {
            font-size: 2.75rem;
            font-weight: 700;
            background: linear-gradient(135deg, var(--secondary-500) 0%, var(--primary-500) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .header p {
            font-size: 1.125rem;
            color: var(--gray-600);
            max-width: 600px;
            margin: 0 auto;
        }

        .tabs {
            display: flex;
            background: var(--gray-50);
            border-bottom: 1px solid var(--gray-200);
        }

        .tab {
            flex: 1;
            padding: 1.25rem 2rem;
            text-align: center;
            cursor: pointer;
            font-weight: 600;
            color: var(--gray-600);
            background: transparent;
            border: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .tab.active {
            background: white;
            color: var(--primary-500);
        }

        .tab-content {
            display: none;
            padding: 3rem;
        }

        .tab-content.active {
            display: block;
        }

        .upload-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .upload-area {
            border: 2px dashed var(--gray-300);
            border-radius: 16px;
            padding: 3rem 2rem;
            text-align: center;
            cursor: pointer;
            background: var(--gray-50);
            position: relative;
        }

        .upload-text h3 {
            font-size: 1.375rem;
            margin-bottom: 0.75rem;
            color: var(--gray-800);
            font-weight: 700;
        }

        .upload-text p {
            color: var(--gray-600);
            margin-bottom: 1rem;
            font-size: 1rem;
        }

        .file-input {
            display: none;
        }

        .generate-btn {
            width: 100%;
            background: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-400) 100%);
            color: white;
            border: none;
            padding: 1.25rem 2rem;
            font-size: 1.125rem;
            font-weight: 600;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .progress-section {
            text-align: center;
            padding: 4rem 2rem;
        }

        .progress-circle {
            width: 140px;
            height: 140px;
            border-radius: 50%;
            background: conic-gradient(
                from 0deg, 
                var(--primary-500) 0%, 
                var(--primary-500) var(--progress, 0%), 
                var(--gray-200) var(--progress, 0%)
            );
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 2rem;
            position: relative;
        }

        .progress-text {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary-500), var(--primary-400));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            position: relative;
            z-index: 1;
        }

        .canvas-section {
            text-align: center;
        }

        .canvas-preview {
            background: var(--gray-50);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid var(--gray-200);
        }

        .brd-content {
            text-align: left;
            background: white;
            padding: 2.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            border: 1px solid var(--gray-200);
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--success-500), var(--success-600));
            color: white;
        }

        .notification {
            position: fixed;
            top: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, var(--success-500), var(--success-600));
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>GoComet BRD AI Agent</h1>
            <p>Transform your solution documents into comprehensive Business Requirements Documents with AI precision.</p>
        </div>

        <div class="main-content">
            <div class="tabs">
                <button class="tab active" onclick="switchTab('upload')">üìÅ Upload Documents</button>
                <button class="tab" onclick="switchTab('progress')">‚ö° AI Processing</button>
                <button class="tab" onclick="switchTab('canvas')">üìã Generated BRD</button>
            </div>

            <!-- Upload Tab -->
            <div id="upload-tab" class="tab-content active">
                <div class="upload-section">
                    <div class="upload-area" onclick="document.getElementById('solution-docs').click()">
                        <div class="upload-text">
                            <h3>Solution Documents</h3>
                            <p>Upload your technical solution documentation</p>
                            <input type="file" id="solution-docs" class="file-input" multiple accept=".pdf,.docx,.doc,.txt,.md" onchange="handleFileSelect(event, 'solution')">
                        </div>
                    </div>
                </div>

                <button class="generate-btn" onclick="generateBRD()" id="generate-btn" disabled>
                    üöÄ Generate BRD with AI
                </button>
            </div>

            <!-- Progress Tab -->
            <div id="progress-tab" class="tab-content">
                <div class="progress-section">
                    <div class="progress-circle" style="--progress: 0%">
                        <div class="progress-text">0%</div>
                    </div>
                    <h2>Processing Documents...</h2>
                    <p>We are analyzing your documents and preparing the BRD.</p>
                </div>
            </div>

            <!-- Canvas Tab -->
            <div id="canvas-tab" class="tab-content">
                <div class="canvas-section">
                    <h2>Generated BRD</h2>
                    <p>Your AI-powered Business Requirements Document is ready for review and collaboration.</p>
                    <div class="canvas-preview">
                        <div id="brd-content" class="brd-content">
                            <h3>Business Requirements Document</h3>
                            <p><em>ü§ñ AI-generated BRD content will appear here after processing...</em></p>
                        </div>
                    </div>

                    <div class="action-buttons">
                        <button class="btn-primary" onclick="downloadBRD()">üíæ Download BRD</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification"></div>

    <script>
        const CONFIG = {
            n8nWebhookUrl: 'https://your-n8n-instance.com/webhook/brd-generator',
            openaiApiKey: 'your-openai-api-key-here',
            model: 'gpt-4',
            timeout: 300000
        };

        let uploadedFiles = {
            solution: [],
        };

        async function generateBRD() {
            if (uploadedFiles.solution.length === 0) {
                showNotification('Please upload at least one document', 'error');
                return;
            }

            switchTab('progress');
            startProgressSimulation();

            try {
                const response = await fetch(CONFIG.n8nWebhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        documents: uploadedFiles,
                    }),
                });

                const data = await response.json();
                if (data.brd_content) {
                    completeProgress({ brd_content: data.brd_content });
                }
            } catch (error) {
                showNotification('Error processing BRD', 'error');
                resetProgress();
            }
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`${tabName}-tab`).classList.add('active');
        }

        function downloadBRD() {
            const brdContent = document.getElementById('brd-content').innerHTML;
            const htmlContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Business Requirements Document</title>
                </head>
                <body>
                    ${brdContent}
                </body>
                </html>
            `;

            const blob = new Blob([htmlContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'BRD_Document.html';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.add(type, 'show');
            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);
        }

        function startProgressSimulation() {
            let progress = 0;
            const progressInterval = setInterval(() => {
                if (progress < 100) {
                    progress += 10;
                    document.querySelector('.progress-circle').style.setProperty('--progress', `${progress}%`);
                    document.querySelector('.progress-text').textContent = `${progress}%`;
                } else {
                    clearInterval(progressInterval);
                }
            }, 500);
        }

        function completeProgress(result) {
            document.getElementById('brd-content').innerHTML = result.brd_content;
        }

        function resetProgress() {
            document.querySelector('.progress-circle').style.setProperty('--progress', '0%');
            document.querySelector('.progress-text').textContent = '0%';
        }
    </script>
</body>
</html>
